{"ast":null,"code":"/** Rule for Yahtzee scoring.\n *\n * This is an \"abstract class\"; the real rules are subclasses of these.\n * This stores all parameters passed into it as properties on the instance\n * (to simplify child classes so they don't need constructors of their own).\n *\n * It contains useful functions for summing, counting values, and counting\n * frequencies of dice. These are used by subclassed rules.\n */\nclass Rule {\n  constructor(params) {\n    // put all properties in params on instance\n    Object.assign(this, params);\n  }\n\n  sum(dice) {\n    // sum of all dice\n    return dice.reduce((prev, curr) => prev + curr);\n  }\n\n  freq(dice) {\n    // frequencies of dice values\n    const freqs = new Map();\n\n    for (let d of dice) freqs.set(d, (freqs.get(d) || 0) + 1);\n\n    return Array.from(freqs.values());\n  }\n\n  count(dice, val) {\n    // # times val appears in dice\n    return dice.filter(d => d === val).length;\n  }\n\n}\n/** Given a sought-for val, return sum of dice of that val.\n *\n * Used for rules like \"sum of all ones\"\n */\n\n\nclass TotalOneNumber extends Rule {\n  constructor() {\n    super(...arguments);\n\n    this.evalRoll = dice => {\n      return this.val * this.count(dice, this.val);\n    };\n  }\n\n}\n/** Given a required # of same dice, return sum of all dice.\n *\n * Used for rules like \"sum of all dice when there is a 3-of-kind\"\n */\n\n\nclass SumDistro extends Rule {\n  constructor() {\n    super(...arguments);\n\n    this.evalRoll = dice => {\n      // do any of the counts meet of exceed this distro?\n      return this.freq(dice).some(c => c >= this.count) ? this.sum(dice) : 0;\n    };\n  }\n\n}\n/** Check if full house (3-of-kind and 2-of-kind) */\n\n\nclass FullHouse extends Rule {\n  constructor() {\n    super(...arguments);\n\n    this.evalRoll = dice => {\n      return this.freq(dice).includes(2) && this.freq(dice).includes(3) ? this.score : 0;\n    };\n  }\n\n}\n/** Check for small straights. */\n\n\nclass SmallStraight extends Rule {\n  constructor() {\n    super(...arguments);\n\n    this.evalRoll = dice => {\n      const d = new Set(dice);\n      if (d.has(2) && d.has(3) && d.has(4) && (d.has(1) || d.has(5))) return this.score;else if (d.has(5) && d.has(3) && d.has(4) && (d.has(6) || d.has(2))) return this.score;\n    };\n  }\n\n}\n/** Check for large straights. */\n\n\nclass LargeStraight extends Rule {\n  constructor() {\n    super(...arguments);\n\n    this.evalRoll = dice => {\n      const d = new Set(dice); // large straight must be 5 different dice & only one can be a 1 or a 6\n\n      return d.size === 5 && (!d.has(1) || !d.has(6)) ? this.score : 0;\n    };\n  }\n\n}\n/** Check if all dice are same. */\n\n\nclass Yahtzee extends Rule {\n  constructor() {\n    super(...arguments);\n\n    this.evalRoll = dice => {\n      // all dice must be the same\n      return this.freq(dice)[0] === 5 ? this.score : 0;\n    };\n  }\n\n} // ones, twos, etc score as sum of that value\n\n\nconst ones = new TotalOneNumber({\n  val: 1\n});\nconst twos = new TotalOneNumber({\n  val: 2\n});\nconst threes = new TotalOneNumber({\n  val: 3\n});\nconst fours = new TotalOneNumber({\n  val: 4\n});\nconst fives = new TotalOneNumber({\n  val: 5\n});\nconst sixes = new TotalOneNumber({\n  val: 6\n}); // three/four of kind score as sum of all dice\n\nconst threeOfKind = new SumDistro({\n  count: 3\n});\nconst fourOfKind = new SumDistro({\n  count: 4\n}); // full house scores as flat 25\n\nconst fullHouse = new FullHouse({\n  score: 25\n}); // small/large straights score as 30/40\n\nconst smallStraight = new SmallStraight({\n  score: 30\n});\nconst largeStraight = new LargeStraight({\n  score: 40\n}); // yahtzee scores as 50\n\nconst yahtzee = new Yahtzee({\n  score: 50\n}); // for chance, can view as some of all dice, requiring at least 0 of a kind\n\nconst chance = new SumDistro({\n  count: 0\n});\nexport { ones, twos, threes, fours, fives, sixes, threeOfKind, fourOfKind, fullHouse, smallStraight, largeStraight, yahtzee, chance };","map":{"version":3,"names":["Rule","constructor","params","Object","assign","sum","dice","reduce","prev","curr","freq","freqs","Map","d","set","get","Array","from","values","count","val","filter","length","TotalOneNumber","evalRoll","SumDistro","some","c","FullHouse","includes","score","SmallStraight","Set","has","LargeStraight","size","Yahtzee","ones","twos","threes","fours","fives","sixes","threeOfKind","fourOfKind","fullHouse","smallStraight","largeStraight","yahtzee","chance"],"sources":["C:/Users/angel/Downloads/react-bootcamp-materials/react-bootcamp-materials/16-building-yahztee/yahtzee-starter/yahtzee-starter/src/Rules.js"],"sourcesContent":["/** Rule for Yahtzee scoring.\n *\n * This is an \"abstract class\"; the real rules are subclasses of these.\n * This stores all parameters passed into it as properties on the instance\n * (to simplify child classes so they don't need constructors of their own).\n *\n * It contains useful functions for summing, counting values, and counting\n * frequencies of dice. These are used by subclassed rules.\n */\n\nclass Rule {\n  constructor(params) {\n    // put all properties in params on instance\n    Object.assign(this, params);\n  }\n\n  sum(dice) {\n    // sum of all dice\n    return dice.reduce((prev, curr) => prev + curr);\n  }\n\n  freq(dice) {\n    // frequencies of dice values\n    const freqs = new Map();\n    for (let d of dice) freqs.set(d, (freqs.get(d) || 0) + 1);\n    return Array.from(freqs.values());\n  }\n\n  count(dice, val) {\n    // # times val appears in dice\n    return dice.filter((d) => d === val).length;\n  }\n}\n\n/** Given a sought-for val, return sum of dice of that val.\n *\n * Used for rules like \"sum of all ones\"\n */\n\nclass TotalOneNumber extends Rule {\n  evalRoll = (dice) => {\n    return this.val * this.count(dice, this.val);\n  };\n}\n\n/** Given a required # of same dice, return sum of all dice.\n *\n * Used for rules like \"sum of all dice when there is a 3-of-kind\"\n */\n\nclass SumDistro extends Rule {\n  evalRoll = (dice) => {\n    // do any of the counts meet of exceed this distro?\n    return this.freq(dice).some((c) => c >= this.count) ? this.sum(dice) : 0;\n  };\n}\n\n/** Check if full house (3-of-kind and 2-of-kind) */\n\nclass FullHouse extends Rule {\n  evalRoll = (dice) => {\n    return this.freq(dice).includes(2) && this.freq(dice).includes(3)\n      ? this.score\n      : 0;\n  };\n}\n\n/** Check for small straights. */\n\nclass SmallStraight extends Rule {\n  evalRoll = (dice) => {\n    const d = new Set(dice);\n\n    if (d.has(2) && d.has(3) && d.has(4) && (d.has(1) || d.has(5)))\n      return this.score;\n    else if (d.has(5) && d.has(3) && d.has(4) && (d.has(6) || d.has(2)))\n      return this.score;\n  };\n}\n\n/** Check for large straights. */\n\nclass LargeStraight extends Rule {\n  evalRoll = (dice) => {\n    const d = new Set(dice);\n\n    // large straight must be 5 different dice & only one can be a 1 or a 6\n    return d.size === 5 && (!d.has(1) || !d.has(6)) ? this.score : 0;\n  };\n}\n\n/** Check if all dice are same. */\n\nclass Yahtzee extends Rule {\n  evalRoll = (dice) => {\n    // all dice must be the same\n    return this.freq(dice)[0] === 5 ? this.score : 0;\n  };\n}\n\n// ones, twos, etc score as sum of that value\nconst ones = new TotalOneNumber({ val: 1 });\nconst twos = new TotalOneNumber({ val: 2 });\nconst threes = new TotalOneNumber({ val: 3 });\nconst fours = new TotalOneNumber({ val: 4 });\nconst fives = new TotalOneNumber({ val: 5 });\nconst sixes = new TotalOneNumber({ val: 6 });\n\n// three/four of kind score as sum of all dice\nconst threeOfKind = new SumDistro({ count: 3 });\nconst fourOfKind = new SumDistro({ count: 4 });\n\n// full house scores as flat 25\nconst fullHouse = new FullHouse({ score: 25 });\n\n// small/large straights score as 30/40\nconst smallStraight = new SmallStraight({ score: 30 });\nconst largeStraight = new LargeStraight({ score: 40 });\n\n// yahtzee scores as 50\nconst yahtzee = new Yahtzee({ score: 50 });\n\n// for chance, can view as some of all dice, requiring at least 0 of a kind\nconst chance = new SumDistro({ count: 0 });\n\nexport {\n  ones,\n  twos,\n  threes,\n  fours,\n  fives,\n  sixes,\n  threeOfKind,\n  fourOfKind,\n  fullHouse,\n  smallStraight,\n  largeStraight,\n  yahtzee,\n  chance,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}